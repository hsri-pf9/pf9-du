#!/usr/bin/env python3

# Copyright (c) 2014 Platform9 Systems Inc.
# All Rights reserved

# This script uses python's apt library to install deb packages. It requires
# root privileges. Since pf9-hostagent runs as pf9, this script is invoked using
# sudo.
#
# When installing an app, the absolute path to the package must start with
# '/var/cache/pf9apps/'.
#
# When deleting an app, the name of the package to be deleted must start with
# 'pf9-'.
#

import apt
import apt.debfile
import argparse
import os
import sys
import traceback

APP_CACHE_PATH = os.path.join('/', 'var', 'cache', 'pf9apps')


def _parse_args():
    parser = argparse.ArgumentParser(description='A utility for installing pf9 '
                                                 'packages.')
    parser.add_argument("package_action")
    parser.add_argument("package")
    args = parser.parse_args()
    return args.package_action, args.package

def _update_apt_cache(cache):
    cache.update()
    cache.open()

def _get_updated_apt_cache():
    cache = apt.cache.Cache()
    _update_apt_cache(cache)
    return cache

def _install_package(package_path, cache):
    """
    Installs an app from the specified path.
    :param package_path: path to the package to be installed
    :raises InstallOperationFailed: if the path to the package being installed
            does not exist or if the absolute path of the package does not start
            with the APP_CACHE_PATH.
    """
    package_path = os.path.realpath(package_path)
    if not os.path.isfile(package_path) or not package_path.startswith(APP_CACHE_PATH):
        raise Exception("Invalid package path: %s" % package_path)

    _update_apt_cache(cache)
    deb_package = apt.debfile.DebPackage(package_path, cache)
    # Checks if the file is installable. Needed before call to missing_deps.
    deb_package.check()

    for missing_package in deb_package.depends:
        missing_package = missing_package[0][0]
        if missing_package == 'pf9-bbslave':
            continue
        missing_package = cache[missing_package]
        missing_package.mark_install()

    cache.commit()
    deb_package.install()

def _erase_package(package_name, cache):
    """
    Removes an installed app.
    :param package_name: name of the package to remove
    :param cache: the apt-cache object
    """
    package = cache[package_name]
    package.mark_delete(purge=True)
    cache.commit()

if __name__ == '__main__':
    package_action, package = _parse_args()
    cache = _get_updated_apt_cache()
    # To install packages noninteractively, we change the environment
    # variables. There may be additional steps needed in the pf9app
    # post-install scripts to take this into account.
    os.environ.update(DEBIAN_FRONTEND='noninteractive')
    try:
        if package_action == 'install':
            _install_package(package, cache)
        elif package_action == 'erase':
            _erase_package(package, cache)
        else:
            sys.stderr.write("Invalid action given: %s" % package_action)
            raise Exception("Invalid action: %s" % package_action)
    except:
        sys.stderr.write("Failed to %s package: %s" % (package_action, package))
        sys.stderr.write(traceback.format_exc())
        raise
