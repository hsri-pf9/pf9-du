#!/opt/pf9/bbmaster/bin/python

# Copyright (c) 2014 Platform9 Systems Inc.
# All Rights Reserved.

"""
Given a unique customer short name, generates a root CA certificate for
the customer, and uses it to sign 3 certificates for rabbit broker,
backbone master, and backbone slave.

Usage: 05-generate-certs [options]
"""

from pf9cert import create_root_CA, create_certificate
from optparse import OptionParser
from os.path import join, exists, isfile
from os import makedirs, environ
import sys


def write_key_and_cert(base_dir, svcname, key, cert):
    data = [('key.pem', key), ('cert.pem', cert)]
    dir = join(base_dir, svcname)
    if not exists(dir):
        makedirs(dir)
    for (name, buf) in data:
        fpath = join(dir, name)
        if isfile(fpath):
            print 'Cert already exists, not writing: %s' % fpath
            continue
        with open(fpath, 'w') as file:
            file.write(buf)
        print 'Wrote %s' % fpath

def parse_input():
    parser = OptionParser(usage="usage: %prog [options]",
                          version="%prog 1.0")
    parser.add_option("--basedir",
                      action='store',
                      dest='basedir',
                      default='/etc/pf9/certs',
                      help='Location where the generated certificate files are stored.')
    parser.add_option("--expiration-days",
                      action='store',
                      dest='exp_days',
                      default='365',
                      help='Number of days after which the certificates will expire.')
    parser.add_option("--customer-shortname",
                      action='store',
                      dest='cu_shortname',
                      default=environ.get("CUSTOMER_SHORTNAME"),
                      help='Customer short name to be used for certificate generation.'
                           'Mandatory to be provided. Can instead be specified through '
                           'CUSTOMER_SHORTNAME environment variable.')
    parser.add_option("--customer-fullname",
                      action='store',
                      dest='cu_fullname',
                      default=environ.get("CUSTOMER_FULLNAME"),
                      help='Customer long name to be used for certificate generation.'
                           'Mandatory to be provided. Can instead be specified through '
                           'CUSTOMER_FULLNAME environment variable.')
    parser.add_option("--fqdn",
                      action='store',
                      dest='fqdn',
                      default=environ.get("DU_FQDN"),
                      help='Fully qualified domain name or IP address of this server.')

    (options, args) = parser.parse_args()

    if not options.cu_shortname or not options.cu_fullname or not options.fqdn:
        sys.stdout.write('Missing mandatory parameters.')
        parser.print_usage()
        sys.exit(1)

    return options

def main():
    options = parse_input()
    services = [('privateweb', options.fqdn, True), ('broker', None, True),
                ('bbmaster', None, False), ('hostagent', None, False),
                ('privateweb_privatefiles', 'privatefiles', True),
                ('broker-openstack', None, True),
                ('mysql', None, True),
                ('ssh', None, True),
                ('privateweb_localhost', 'localhost', True)]

    base_dir = options.basedir
    cust_name = options.cu_shortname
    cust_fullname = options.cu_fullname
    days = int(options.exp_days)
    (key, cert) = create_root_CA(cust_name, cust_fullname, days)
    write_key_and_cert(base_dir, 'ca', key, cert)
    for (svcname, common_name, for_server) in services:
        if not common_name:
            common_name = svcname
        (key, cert) = create_certificate(customer_id=cust_name,
                                         service_id=common_name,
                                         days=days,
                                         for_server=for_server)
        write_key_and_cert(base_dir, svcname, key, cert)

if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        sys.stderr.write('Certificate generation failed.')
        sys.stderr.write(str(e))
        sys.exit(1)
