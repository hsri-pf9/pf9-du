#!/usr/bin/env python
# Copyright (c) 2014 Platform9 Systems Inc.
# All Rights Reserved.

"""
Control script for deployment unit related operations
Usage:
#./du_ctl [options]
"""

import argparse
import json
import logging
import os
import re
import requests
import sys
import time
from prettytable import PrettyTable

JSON_INDENT = 4

logging.basicConfig(level=logging.DEBUG,
                    stream=sys.stderr,
                    format='%(message)s')

# mute info messages from few libraries
for logger in 'requests', 'urllib3', 'iso8601':
    logging.getLogger(logger).setLevel(logging.WARNING)

log = logging.getLogger('du-ctl')
log.setLevel(logging.INFO)

_bbmaster_endpoint = 'http://localhost:8082/v1/hosts'
_resmgr_endpoint = 'http://localhost:8083/v1'
_sidekick_endpoint = 'http://localhost:3011/v1'
_keystone_endpoint = 'http://localhost:8080/keystone_admin/v2.0/tokens'

debug_parser = argparse.ArgumentParser(add_help=False)
debug_parser.add_argument("--debug",
                        action='store_true',
                        dest='debug',
                        help='Write debug level logs to stdout')

format_parser = argparse.ArgumentParser(add_help=False)
format_parser.add_argument("--format",
                    action='store',
                    dest='format',
                    default='json',
                    choices=['json', 'table'],
                    help='Output format')

parent_parsers = [debug_parser, format_parser]

_parser = argparse.ArgumentParser(parents=parent_parsers)

def login(username, password, tenant):
    """
    Login using username, password, tenant
    :param username: user name
    :param password: password for user
    :param tenant: tenant to login
    :return: Keystone login response json
    """
    data = {
        "auth": {
            "tenantName": tenant,
            "passwordCredentials": {
            "username": username,
            "password": password
            }
        }
    }
    r = requests.post(_keystone_endpoint,
                      json=data,
                      verify=False)
    r.raise_for_status()
    return r.json()

def _get_login_token(args):
    user, password = get_user_pass(args)
    login_resp = login(user, password, 'service')
    return login_resp['access']['token']['id']

def _build_role_parser(subparsers):
    """
    Build subparser for resource manager's roles related operations
    :param subparsers: Subparsers object which is used to build the role
    subparser
    """
    role_parser = subparsers.add_parser('hostrole',
                                        help='Host role related commands')
    role_sub_parser = role_parser.add_subparsers(help='Host role sub-commands',
                                                 dest='role_subparser')

    role_apply_parser = role_sub_parser.add_parser('apply',
                                                   help='Apply a role to a host')
    role_apply_parser.add_argument('--host_id',
                                   action='store',
                                   dest='host_id',
                                   required=True,
                                   help='Host ID of the host to which the role is going to be applied')
    role_apply_parser.add_argument('--role',
                                   action='store',
                                   dest='role',
                                   required=True,
                                   help='Name of the role that is being applied')
    role_apply_parser.add_argument('--force',
                                   action='store_true',
                                   required=False,
                                   help='Apply role even unconditionally, e.g., even if the role is up-to-date. Optional.')
    _add_credential_arguments(role_apply_parser)

def _build_hostagent_parser(subparsers):
    """
    Build subparser for host agent related operations
    :param subparsers: Subparsers object which is used to build the role
    subparser
    """
    agent_parser = subparsers.add_parser('hostagent',
                                         help='Host agent commands')

    agent_sub_parser = agent_parser.add_subparsers(help='Host agent sub-commands',
                                                   dest='agent_subparser')

    # Parser for restart
    agent_restart_parser = agent_sub_parser.add_parser('restart',
                                                      help='Restart the host agent')
    agent_restart_parser.add_argument('--host_id',
                    action='store',
                    dest='host_id',
                    required=True,
                    help='Host ID of the host to restart')

    # Parser for update
    agent_update_parser = agent_sub_parser.add_parser('update',
                                                      help='Update the host agent')
    agent_update_parser.add_argument('--host_id',
                    action='store',
                    dest='host_id',
                    required=True,
                    help='Host ID of the host to which the agent update has to be applied')
    agent_update_parser.add_argument("--agent_version",
                      action='store',
                      dest='agent_version',
                      required=True,
                      help='Version of the hostagent that is being updated to.')
    agent_update_parser.add_argument("--agent_name",
                      action='store',
                      dest='agent_name',
                      default='pf9-hostagent',
                      help='Name of the hostagent package. Defaults to pf9-hostagent')
    agent_update_parser.add_argument("--agent_url",
                      action='store',
                      dest='agent_url',
                      required=True,
                      help='URL from where this agent package can be downloaded from')

    # Parser for list
    agent_list_parser = agent_sub_parser.add_parser('list',
                                                    parents=parent_parsers,
                                                    help='List the hosts and its details')
    agent_list_parser.add_argument('--host',
                      action='store',
                      dest='host',
                      help='ID of the specific host to be queried. If not specified, '
                           'all hosts are queried')

def _build_sidekick_parser(subparsers):
    """
    Build subparser for Sidekick related operations
    :param subparsers: Subparsers object which is used to build the role
    subparser
    """
    sidekick_parser = subparsers.add_parser('sidekick',
                                        help='Sidekick related commands')
    sidekick_sub_parser = sidekick_parser.add_subparsers(help='Sidekick sub-commands',
                                                         dest='sidekick_subparser')

    sidekick_support_parser = sidekick_sub_parser.add_parser('support',
                                                     help='Support commands available through Sidekick.')
    sidekick_support_sub_parser = sidekick_support_parser.add_subparsers(help='Sidekick support sub-commands',
                                                                 dest='sidekick_support_subparser')

    # sidekick support bundle
    sidekick_support_bundle_parser = sidekick_support_sub_parser.add_parser('bundle',
                                                                    help='Retrieve support bundle via Sidekick.')
    sidekick_support_bundle_parser.add_argument("--host_id",
                                            required=True,
                                            help='ID of the host from which to pull a support bundle.')

    # sidekick support command
    sidekick_support_command_parser = sidekick_support_sub_parser.add_parser('command',
                                                                    help='Execute a command via Sidekick.')
    sidekick_support_command_parser.add_argument("--command",
                                            required=True,
                                            help='Command to execute on the host.')
    sidekick_support_command_parser.add_argument("--host_id",
                                            required=True,
                                            help='ID of the host on which to execute the command.')

    # sidekick host list
    sidekick_host_list_parser = sidekick_sub_parser.add_parser('list',
                                                                parents=parent_parsers,
                                                                help='List hosts heartbeating to sidekick.')
    sidekick_host_list_parser.add_argument('--host_id',
                                   action='store',
                                   dest='host_id',
                                   required=False,
                                   help='ID of the host to query.')

def _add_credential_arguments(parser):
    parser.add_argument("--user",
                        action='store',
                        dest='user',
                        help='User account to use. Optional if OS_USERNAME is set.')
    parser.add_argument("--password",
                        action='store',
                        dest='password',
                        help='User account password. Optional if OS_PASSWORD is set.')

def _build_host_parser(subparsers):
    """
    Build subparser for host related operations
    :param subparsers: Subparsers object which is used to build the host
    subparser
    """
    host_parser = subparsers.add_parser('host',
                                        help='Host commands')
    host_sub_parser = host_parser.add_subparsers(help='Host sub-commands',
                                                 dest='host_subparser')

    host_list_parser = host_sub_parser.add_parser('list',
                                                  parents=parent_parsers,
                                                  help='List hosts information')
    _add_credential_arguments(host_list_parser)

    host_role_reset_parser = host_sub_parser.add_parser('role-reset',
                                                        help='Reset host roles')
    host_role_reset_parser.add_argument("--host_id",
                                        action='store',
                                        dest='host_id',
                                        required=True,
                                        help='Host ID of host where its roles should be cleared')
    _add_credential_arguments(host_role_reset_parser)

    host_support_parser = host_sub_parser.add_parser('support',
                                                     help='Get support bundle from hosts')
    host_support_sub_parser = host_support_parser.add_subparsers(help='Host support sub-commands',
                                                                 dest='host_support_subparser')
    host_support_bundle_parser = host_support_sub_parser.add_parser('bundle',
                                                                    help='Get support bundle')
    host_support_bundle_parser.add_argument("--host_id",
                                            required=True,
                                            help='ID of host to get support bundle from. ')
    _add_credential_arguments(host_support_bundle_parser)

    host_support_command_parser = host_support_sub_parser.add_parser('command',
                                                                     help='Run a command on a host')
    host_support_command_parser.add_argument("--host_id",
                                            required=True,
                                            help='ID of host to get support bundle from. ')
    host_support_command_parser.add_argument("--command",
                                            required=True,
                                            help='The command to run.')
    _add_credential_arguments(host_support_command_parser)

def _build_parsers():
    """
    Build the command line parser hierarchy based on the control script actions
    """
    subparsers = _parser.add_subparsers(help='sub-commands',
                                        dest='subparser')
    _build_role_parser(subparsers)
    _build_hostagent_parser(subparsers)
    _build_host_parser(subparsers)
    _build_sidekick_parser(subparsers)

def _process_host_commands(args):
    if args.host_subparser == 'list':
        do_host_list(args)
        return
    elif args.host_subparser == 'role-reset':
        do_host_role_reset(args)
        return
    elif args.host_subparser == 'support':
        if args.host_support_subparser == 'bundle':
            do_support_bundle(args)
            return
        elif args.host_support_subparser == 'command':
            do_support_command(args)
            return


def _process_hostagent_commands(args):
    if args.agent_subparser == 'update':
        if not (args.host_id and args.agent_version and args.agent_url):
            # Should never hit this because argparse's parsing should take
            # care of this, but keeping it here as a safety net.
            log.error('Missing mandatory arguments for host agent update')
            _parser.print_help()
            sys.exit(1)
        else:
            # Agent update
            do_agent_update(args)
            return
    elif args.agent_subparser == 'list':
        do_agent_list(args)
        return
    elif args.agent_subparser == 'restart':
        if not args.host_id:
            # Should never hit this because argparse's parsing should take
            # care of this, but keeping it here as a safety net.
            log.error('Missing mandatory arguments for host agent restart')
            _parser.print_help()
            sys.exit(1)
        do_agent_restart(args)
        return


def _process_hostrole_commands(args):
    if args.role_subparser == 'apply':
        do_set_host_role(args)
        return


def _process_sidekick_commands(args):
    if args.sidekick_subparser == 'list':
        do_sidekick_list(args)
        return
    elif args.sidekick_subparser == 'support':
        if args.sidekick_support_subparser == 'bundle':
            do_sidekick_support_bundle(args)
            return
        elif args.sidekick_support_subparser == 'command':
            do_sidekick_support_command(args)
            return


def _process_cmd(args):
    """
    Does the work of the command.
    :param args: command line args parsed from argparse
    """
    if args.debug:
        log.setLevel(logging.DEBUG)

    subparser_functions = dict(
        host=_process_host_commands,
        hostagent=_process_hostagent_commands,
        hostrole=_process_hostrole_commands,
        sidekick=_process_sidekick_commands,
    )

    if args.subparser in subparser_functions.keys():
        subcommand_parser = subparser_functions[args.subparser]
        subcommand_parser(args)
    else:
        # Did not match any known command. Should not hit this because argparse
        # should do everything for us.
        _parser.print_help()


def get_user_pass(args):
    """
    Get username, password from command line args, if provided. Otherwise,
    use the environment variables to pick up these values. Else error out.
    :param args: Command line args
    :return: Tuple of username and password
    """
    if not args.user:
        args.user = os.getenv('OS_USERNAME')
    if not args.password:
        args.password = os.getenv('OS_PASSWORD')

    if not args.password or not args.user:
        log.info('Username/password is missing')
        _parser.print_help()
        sys.exit(1)

    return args.user, args.password

def do_host_list(args):
    """
    Retrieve information for all hosts
    :param args: Command line args
    """
    headers = {'X-Auth-Token': _get_login_token(args)}
    resp = _do_get('%s/hosts' % _resmgr_endpoint, headers=headers)
    _print_host_list(args, resp)

def do_host_role_reset(args):
    """
    Remove all roles associated with a host
    :param args: Command line args
    """
    headers = {'X-Auth-Token': _get_login_token(args)}
    resp = requests.delete('%s/hosts/%s' % (_resmgr_endpoint, args.host_id),
                           headers=headers)
    resp.raise_for_status()
    print 'All roles reset for host %s. It will take a few minutes for' \
             ' the role reset to be synchronized across all services.' % args.host_id

def do_sidekick_list(args):
    """
    Retrieve heartbeat information for hosts in Sidekick
    :param args: Command line args
    """
    sidekick_host_url = '{}/hosts'.format(_sidekick_endpoint)

    if args.host_id:
        sidekick_host_url = sidekick_host_url + '/{}'.format(args.host_id)

    resp = _do_get(sidekick_host_url)
    _print_sidekick_list(args, resp)

def do_sidekick_support_bundle(args):
    """
    Retrieve support bundle via Sidekick
    :param args: Command line args
    """
    sidekick_command_url = '{}/command'.format(_sidekick_endpoint)
    body = dict(hostid=args.host_id, opcode='bundle')

    resp = _do_post(sidekick_command_url, body)

    print("Support bundle requested for {}".format(resp['hostid']))

def do_sidekick_support_command(args):
    """
    Execute a command via Sidekick
    :param args: Command line args
    """
    sidekick_command_url = '{}/command'.format(_sidekick_endpoint)
    body = dict(hostid=args.host_id, opcode='command', command=args.command)

    resp = _do_post(sidekick_command_url, body)

    print("Command executed for {}".format(resp['hostid']))

def _get_bundles(bundle_dir):
    """
    Return a set of the paths of the bundles in bundle_dir.
    A bundle name should be of the form:
        <hostname>-<time>.tgz
    where time is generated by datetime.strftime("%Y-%m-%d-%H-%M-%S").
    We will NOT consider hostnames when looking for bundles.
    Logs a warning if bundle_dir is not a directory.
    """
    bundle_pattern = re.compile('.*-(\d{4})' + '(-\d{2})' * 5 + '.tgz$')
    bundles = set()
    try:
        bundle_dir_list = os.listdir(bundle_dir)
    except OSError:
        log.debug("Could not access bundle dir: %s" % bundle_dir, exc_info=True)
        return bundles
    for bundle_name in bundle_dir_list:
        bundle = os.path.join(bundle_dir, bundle_name)
        if bundle_pattern.match(bundle):
            bundles.add(bundle)
    return bundles

def do_support_bundle(args):
    headers = {'X-Auth-Token': _get_login_token(args)}
    support_dir = os.path.join('/opt', 'pf9', 'support', args.host_id)

    bundles_before = _get_bundles(support_dir)

    resp = requests.post('%s/hosts/%s/support/bundle' % (_resmgr_endpoint, args.host_id),
                         headers=headers)
    resp.raise_for_status()

    # Number of attempts to check for creation of the support bundle
    attempts = 60
    interval = 5
    for _ in xrange(attempts):
        time.sleep(interval)
        bundles_after = _get_bundles(support_dir)
        new_bundles = bundles_after - bundles_before
        if len(new_bundles):
            if len(new_bundles) != 1:
                print 'Multiple bundles written!'
            print 'Wrote new bundle: %s' % new_bundles.pop()
            return
        print "Waiting for support bundle..."

    log.error("Failed while waiting for support bundle")
    print "Failed while waiting for support bundle"
    sys.exit(1)

def do_support_command(args):
    headers = {'X-Auth-Token' : _get_login_token(args)}
    body = {'command' : args.command}
    resp = requests.post('%s/hosts/%s/support/command/' % (_resmgr_endpoint, args.host_id),
                         headers=headers, json=body)
    resp.raise_for_status()

    print "Response code: %d " % resp.status_code

def _do_get(url, headers={}):
    """
    Execute the GET http call
    :param str url: URL to run the GET call on
    :return: JSON response
    :rtype: JSON encoded dict
    """
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return resp.json()

def _do_method(url, method, body, headers):
    """
    Execute a request that contains a body
    :param str url: URL to send the request
    :param dict body: Request body
    :return: JSON response
    :rtype: JSON encoded dict
    """
    resp = method(url, json=body, headers=headers)
    resp.raise_for_status()
    return resp.json()

def _do_put(url, body=None, headers={}):
    return _do_method(url, requests.put, body, headers)

def _do_post(url, body=None, headers={}):
    return _do_method(url, requests.post, body, headers)

def _update_and_poll(options, cur_host_agent_version):
    """
    Trigger a host agent update and poll for its status change
    :param ParserOption options: command line options
    :param str cur_host_agent_version: Version of the current host agent
    on the host
    """
    host_endpoint = ''.join([_bbmaster_endpoint, '/', options.host_id])
    put_req = ''.join([host_endpoint, '/hostagent'])
    agent_data = {
        'version': options.agent_version,
        'name': options.agent_name,
        'url': options.agent_url
    }
    try:
        _do_put(put_req, agent_data)

        time_left = 15 * 60    # 15 mins
        poll_interval = 20    # 20 secs
        updating = False
        while (time_left):
            host_details = _do_get(host_endpoint)
            host_agent_status = host_details['host_agent']['status']
            host_agent_version = host_details['host_agent']['version']
            if host_agent_version == options.agent_version:
                log.info('Host agent for host %s is at version %s',
                         options.host_id, options.agent_version)
                return
            if host_agent_status == 'updating':
                updating = True
            else:
                # agent_status is 'ok'
                if host_agent_version == cur_host_agent_version and updating:
                    # The host was updating but has now reverted to ok with the
                    # agent version back to the old version. Implies error
                    log.error('Host agent update failed for host. Agent version '
                              'is %s', host_agent_version)
                    sys.exit(1)

            log.info('Agent update status : %s, agent version: %s',
                     host_agent_status, host_agent_version)

            time.sleep(poll_interval)
            time_left -= poll_interval
        raise Exception('Timed out while waiting for hostagent update')
    except Exception:
        log.exception('Update host agent request failed')
    sys.exit(1)

def do_agent_list(options):
    """
    List host agent related details
    :param options: args parsed from command line by argparser
    """
    resp = []
    if options.host:
        url = ''.join([_bbmaster_endpoint, '/', options.host])
        query_op = _do_get(url)
        resp.append(query_op)
    else:
        resp = _do_get(_bbmaster_endpoint)

    output = []
    for host in resp:
        temp = {
            'host id': host['host_id'],
            'agent info': host['host_agent']
        }
        output.append(temp)

    _print_agent_list(options, output)

def _ensure_host_exists(options):
    resp = _do_get(''.join([_bbmaster_endpoint, '/ids']))
    if options.host_id not in resp:
        log.info('Host ID %s not in list of hosts that backbone is aware of',
             options.host_id)
        raise Exception()

def do_agent_update(options):
    """
    Perform host agent update
    :param ParserOption options: command line options
    """
    try:
        _ensure_host_exists(options)
        # Query host details.
        host_endpoint = ''.join([_bbmaster_endpoint, '/', options.host_id])
        resp = _do_get(host_endpoint)
    except Exception:
        log.exception('Querying host details failed')
        print 'Querying host details failed'
        sys.exit(1)

    # If host agent is already in expected version, do nothing
    if resp['host_agent']['version'] == options.agent_version:
        print 'Host agent on %s already at version %s' % (options.host_id, options.agent_version)
        return

    # If the host agent is currently updating, quit
    if resp['host_agent']['status'] == 'updating':
        print 'Host %s is currently updating the host agent. Try again later.' % options.host_id
        return

    # push update
    _update_and_poll(options, resp['host_agent']['version'])

def do_agent_restart(options):
    """
    Perform host agent restart
    :param ParserOption options: command line options
    """
    _ensure_host_exists(options)
    url = ''.join([_bbmaster_endpoint, '/', options.host_id, '/support/command'])
    body = {'command': 'sudo service pf9-hostagent restart'}
    _do_post(url, body)

def do_set_host_role(options):
    """
    Applies the role to a host
    :param options: command line options that are passed in for this command
    """
    def up_to_date():
        """
        Query the backbone API and return a boolean value specifying whether
        the role was successfully updated.
        """
        host_info_endpoint = ''.join([_bbmaster_endpoint, '/', options.host_id])
        host_info = _do_get(host_info_endpoint)
        app_details = host_info['apps']
        app_status = host_info['status']
        print('Checking if role %s for host %s is up to date' %
                  (options.role,
                  options.host_id))
        print('apps: %s' % app_details)
        print('app status: %s' % app_status)
        return (all(app in app_details and
                    app_details[app]['version'] == app_version
                    for app, app_version in app_versions.iteritems())
                and app_status == 'ok')

    # Ensure host ID exists
    if options.host_id not in _do_get(''.join([_bbmaster_endpoint, '/ids'])):
        print('Host ID %s not in list of hosts that backbone is aware of' %
                 options.host_id)
        sys.exit(1)

    # Set up the headers
    headers = {'X-Auth-Token': _get_login_token(options)}

    app_ver_endpoint = ''.join([_resmgr_endpoint,
                                '/roles/',
                                options.role,
                                '/apps/versions'])
    app_versions = _do_get(app_ver_endpoint, headers=headers)

    # Skip the conditionals if the role should be applied unconditionally
    if not options.force:
        # If the apps for the specified role are already at the expected version, do nothing
        if up_to_date():
            print('%s on %s is already up to date' %
                     (options.role, options.host_id))
            return

    try:
        url = ''.join([_resmgr_endpoint, '/hosts/', options.host_id, '/roles/', options.role])
        log.info('Updating role %s for host %s', options.role, options.host_id)
        _do_put(url, body={}, headers=headers)

        time_left = 10 * 60    # 10 mins
        poll_interval = 20     # 20 secs
        while time_left:
            time.sleep(poll_interval)
            time_left -= poll_interval

            if up_to_date():
                log.info('Role %s for host %s is up to date',
                         options.role, options.host_id)
                return
            print('Waiting for host %s to update role %s' %
                     (options.host_id, options.role))
    except Exception:
        log.exception('Request to update host %s with role %s failed',
                      options.host_id,
                      options.role)
    print('Failed while updating host %s with role %s' %
              (options.host_id,
              options.role))
    sys.exit(1)

def _print_host_list(args, host_list):
    if args.format == 'table':
        _print_host_list_table(host_list)
    else:
        print json.dumps(host_list, indent=JSON_INDENT)

def _print_agent_list(args, agent_list):
    if args.format == 'table':
        _print_agent_list_table(agent_list)
    else:
        print json.dumps(agent_list, indent=JSON_INDENT)

def _print_agent_list_table(agent_list):
    header = ["id", "status", "version"]
    rows = []
    for agent in agent_list:
        row = [
            agent['host id'],
            agent['agent info']['status'],
            agent['agent info']['version'],
        ]
        rows.append(row)
    _print_list(header, rows)

def _get_nested_property(top, *args):
    for arg in args:
        if arg in top:
            top = top[arg]
        else:
            return None
    return top


def _print_host_list_table(host_list):
    header = ["id", "hostname", "ip_addresses", "responding", "role_status", "roles"]
    rows = []
    for host in host_list:
        iface_ip = _get_nested_property(host, 'extensions', 'interfaces', 'data', 'iface_ip')
        ip_addresses = ""
        if iface_ip:
            ip_address_arr = map(lambda x: x[0] + ":" +x[1], iface_ip.items())
            ip_addresses = reduce(lambda x,y: x+"\n"+y, ip_address_arr)
            # PrettyTable does not add row separators. Additional newline helps readability.
            ip_addresses += '\n'
        roles = ""
        if 'roles' in host:
            roles = '\n'.join(host['roles'])
            roles += '\n'
        row = [
            host['id'],
            _get_nested_property(host, 'info', 'hostname'),
            ip_addresses,
            _get_nested_property(host, 'info', 'responding'),
            _get_nested_property(host, 'role_status'),
            roles
        ]
        rows.append(row)
    _print_list(header, rows)

def _print_sidekick_list(args, sidekick_list):
    if args.format == 'table':
        if args.host_id:
            # Match /hosts data structure when printing a single host.
            host_id = sidekick_list['hostid']

            sidekick_host = {}
            sidekick_host[host_id] = sidekick_list

            _print_sidekick_list_table(sidekick_host)
        else:
            _print_sidekick_list_table(sidekick_list)
    else:
        print(json.dumps(sidekick_list, indent=JSON_INDENT))

def _print_sidekick_list_table(sidekick_list):
    header = None
    rows = []
    for host in sidekick_list.values():
        if not header:
            header = host.keys()

        row = host.values()
        rows.append(row)
    _print_list(header, rows)

def _print_list(header, rows):
    table = PrettyTable()
    table._set_field_names(header)
    for row in rows:
        table.add_row(row)
    print table

def main():
    _build_parsers()
    args = _parser.parse_args()
    _process_cmd(args)

if __name__ == '__main__':
    main()
