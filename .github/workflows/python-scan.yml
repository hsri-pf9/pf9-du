name: Python Security Scans & Linting

on:
  push:
    branches: [test]
  pull_request:
    branches: [test]
  schedule:
    - cron: '0 0 * * 0'  # Every Monday at 12 PM UTC

jobs:
  bandit_scan:
    name: Bandit Security Scan (High/Critical)
    runs-on: ubuntu-latest
    outputs:
      bandit-high-found: ${{ steps.check.outputs.bandit-high-found }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit & Save Report
        run: |
          bandit -r . --format json --severity-level high -o bandit-report.json

      - name: Check for High/Critical Issues
        id: check
        run: |
          count=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json)
          echo "bandit-high-found=$([[ $count -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          cat bandit-report.json

  create-pr-bandit:
    name: Create PR if Bandit Found High Vulns
    needs: [bandit_scan]
    if: needs.bandit_scan.outputs.bandit-high-found == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Add Bandit Alert Log
        run: |
          echo "High vulnerabilities found by Bandit at $(date)" >> .bandit-security-alert.log
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .bandit-security-alert.log
          git commit -m "chore: bandit high severity alert log"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "chore: High/Critical vulnerabilities detected by Bandit ðŸš¨"
          title: "chore: Bandit high severity scan triggered PR"
          body: |
            Bandit detected high severity security issues.
            This PR was created automatically to track remediation.
          branch: "auto/high-severity-bandit-scan"
          base: "main"

  semgrep_scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"

  codeql_scan:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Analyze
        uses: github/codeql-action/analyze@v2

  gitleaks:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v

  ruff_lint:
    name: Ruff Lint (E, F, I)
    runs-on: ubuntu-latest
    outputs:
      ruff-failed: ${{ steps.check.outputs.ruff-failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ruff
        run: pip install ruff

      - name: Run Ruff Lint
        id: check
        run: |
          ruff check . --select E,F,I --exit-zero > ruff_output.txt
          cat ruff_output.txt
          if grep -qE "." ruff_output.txt; then
            echo "ruff-failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "ruff-failed=false" >> $GITHUB_OUTPUT
          fi

  autofix_pr:
    name: Auto PR for Ruff Fixes
    needs: [ruff_lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ruff
        run: pip install ruff

      - name: Run Ruff Autofix
        run: ruff check . --select E,F,I --fix

      - name: Commit & Push Fixes (if any)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b autofix/ruff-fixes || git checkout autofix/ruff-fixes
          git add .
          if git diff --cached --quiet; then
            echo "âœ… No autofixes required."
          else
            git commit -m "fix: Apply Ruff autofixes"
            git push origin HEAD
          fi

      - name: Create PR for Ruff Fixes
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix: Apply Ruff autofixes"
          branch: autofix/ruff-fixes
          title: "chore: Auto lint fixes (Ruff)"
          body: |
            This PR includes auto-generated lint fixes from Ruff.
          labels: auto-fix
