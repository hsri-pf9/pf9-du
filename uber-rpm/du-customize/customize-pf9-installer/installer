#!/bin/bash
# Copyright (c) 2015 Platform9 Systems Inc.

# This identifier is replaced by the build script
DISTRO=__DISTRO__
source $(dirname $0)/globals.sh
source $(dirname $0)/wait.sh
source $(dirname $0)/proxy.sh
source $(dirname $0)/support.sh
source $(dirname $0)/check_os_distro.sh
source $(dirname $0)/check_sudoers.sh
source $(dirname $0)/check_ports.sh
source $(dirname $0)/check_network.sh
source $(dirname $0)/installer.${DISTRO}

function cleanup()
{
    rm -rf $TMPDIR
}
trap cleanup EXIT

function usage()
{
    echo
    echo "Description: Platform9 installer"
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "--proxy=<host>:<port>  | Setup HTTP proxy with <host> and <port> as the proxy host and port respectively."
    echo "--no-proxy             | Do not ask proxy configuration."
    echo "--extract              | Extract installation files to /tmp/pf9-install-XXXXX and exit."
    echo "--skip-os-check        | Do not ask operating system compatibility questions."
    echo "--help                 | Display program help."
}

while getopts ":-:" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                no-proxy)
                    ASK_PROXY="false"
                    SETUP_PROXY="false"
                    ;;
                proxy=*)
                    PROXYINFO=${OPTARG#*=}
                    PROXYINFO=$(strip_http_schema "${PROXYINFO}")
                    # replace every instance of ':' with ' '
                    PROXYARR=(${PROXYINFO//:/ })

                    PROXY_HOST=${PROXYARR[0]}
                    PROXY_PORT=${PROXYARR[1]}

                    ASK_PROXY="false"
                    SETUP_PROXY="true"
                    ;;
                extract)
                    # disable the EXIT trap that cleans up our $TMPDIR
                    trap - EXIT
                    echo "Files extracted at: ${TMPDIR}"
                    echo
                    exit 0
                    ;;
                skip-os-check)
                    echo "Skipping operating system compatibility questions"
                    SKIP_OS_CHECK="true"
                    ;;
                vmware)
                    # This option is not exposed in the help message and is for
                    # internal use during installations on Platform9 VMWare
                    # appliance.
                    VMWARE="true"
                    ;;
                help)
                    usage
                    exit 0
                    ;;
                *)
                    echo "Unknown option: --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;

        *)
            if [[ "$OPTERR" = 1 ]] && [[ "${optspec:0:1}" != ":" ]]; then
                echo "Unknown option: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done

function check_services_running()
{
    # verify that pf9-hostagent is running
    echo "Checking if services are running"
    service pf9-hostagent status
    if [[ $? != "0" ]]; then
        support_generate_bundle
        exit 1
    else
        # if hostagent is running, verify desired_apps.json includes pf9-comms with running=true
        wait_dir_exists 30 ${HOSTAGENT_DIR}
        check_exit_code_and_generate_support_bundle $?

        local host_uuid=`ls -l ${HOSTAGENT_DIR} | grep "^d" | tr -s ' ' | cut -d' ' -f9`

        local desired_apps="${HOSTAGENT_DIR}/${host_uuid}/${DESIRED_APPS}"
        wait_file_exists 30 $desired_apps
        check_exit_code_and_generate_support_bundle $?

        local comms_state=`python ${JSON_TOOL} --query pf9-comms.running ${desired_apps}`
        # python returns boolean values capitalized
        if [[ "${comms_state}" != "True" ]]; then
            echo
            echo "pf9-comms is not in the running state"
            support_generate_bundle
            exit 1
        fi
    fi
}

function start_services()
{
    echo "Starting services"
    # order is important here
    service pf9-comms start
    wait_service_running 30 "pf9-comms"
    check_exit_code_and_generate_support_bundle $?

    service pf9-hostagent start
    wait_service_running 30 "pf9-hostagent"
    check_exit_code_and_generate_support_bundle $?
}

# $1: exit code
# $2: Description of the step being executed
function check_exit_code_and_generate_support_bundle()
{
    local exit_code=$1

    if [[ "${exit_code}" != "0" ]]; then
        support_generate_bundle
        exit 1
    fi
}

function pf9_install()
{
    ${INSTALL} pf9-hostagent*.${EXT}
    if [[ $? != "0" ]]; then
        echo "pf9-hostagent installation failed"
        return 1
    fi
    ${INSTALL} pf9-comms*.${EXT}
    if [[ $? != "0" ]]; then
        echo "pf9-comms installation failed"
        return 1
    fi
}

function pre_install_check()
{
    # Check if we support this Linux distribution
    check_platform

    # Check if sudoers.d is included
    check_sudoers

    # Check if any ports we need are currently in use
    check_ports

    # Check if we can resolve and connect to  DU_FQDN
    check_network

    echo "Checking if package manager is available"
    which ${PKG_MANAGER}
    if [[ $? != "0" ]]; then
        echo "${PKG_MANAGER} is not installed. Exiting..."
        exit 1
    fi
    ${QUERY_PKGS} | grep pf9-
    # fail if we match (exit code = 0) at least one package
    # no reinstallation for now
    if [[ $? == "0" ]]; then
        echo
        echo "Platform9 packages are already present. Exiting..."
        exit 1
    fi
    echo
}

function main()
{
    if [[ "${ASK_PROXY}" == "true" ]]; then
        if [[ "${TTY_AVAILABLE}" == "true" ]]; then
            proxy_ask
        fi
    fi

    pre_install_check

    distro_install
    check_exit_code_and_generate_support_bundle $?

    echo "Installing Platform9 host agent"
    pf9_install
    check_exit_code_and_generate_support_bundle $?

    if [[ "${VMWARE}" == "true" ]]; then
        vmware_install
    fi

    # this directory shouldn't exist, but just in case
    rm -rf /var/opt/pf9/hostagent

    if [[ "${SETUP_PROXY}" == "true" ]]; then
        proxy_setup $PROXY_HOST $PROXY_PORT
    fi

    start_services
    check_services_running

    echo
    echo "Installation succeeded!"
}

main
