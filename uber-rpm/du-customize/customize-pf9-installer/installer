#!/bin/bash
# Copyright (c) 2015 Platform9 Systems Inc.

# This identifier is replaced by the build script
DISTRO
source $(dirname $0)/globals.sh
source $(dirname $0)/wait.sh
source $(dirname $0)/proxy.sh
source $(dirname $0)/support.sh
source $(dirname $0)/check_os_distro.sh
source $(dirname $0)/installer.${DISTRO}

function usage()
{
    echo
    echo "Description: Platform9 installer"
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "--proxy=<host>:<port>  | Setup HTTP proxy with <host> and <port> as the proxy host and port respectively"
    echo "--help                 | Display program help"
    echo "--no-proxy             | Do not setup proxy."
}

while getopts ":-:" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                no-proxy)
                    ASK_PROXY="false"
                    SETUP_PROXY="false"
                    ;;
                proxy=*)
                    PROXYINFO=${OPTARG#*=}
                    # replace every instance of ':' with ' '
                    PROXYARR=(${PROXYINFO//:/ })
                    PROXY_HOST=${PROXYARR[0]}
                    PROXY_PORT=${PROXYARR[1]}
                    ASK_PROXY="false"
                    SETUP_PROXY="true"
                    ;;
                help)
                    usage
		    exit 0
                    ;;
                *)
                    echo "Unknown option: --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;

        *)
            if [[ "$OPTERR" = 1 ]] && [[ "${optspec:0:1}" != ":" ]]; then
                echo "Unknown option: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done

function echo_debug()
{
    if [[ ${DEBUG} == "1" ]]; then
        echo
        echo "DEBUG: $1"
    fi
}

function check_services_running()
{
    # verify that pf9-hostagent is running
    service pf9-hostagent status > /dev/null 2>&1
    if [[ $? != "0" ]]; then
        # fail for now
        echo_debug  "pf9-hostagent is not running"
        support_generate_bundle
        exit 1
    else
        # if hostagent is running, verify desired_apps.json includes pf9-comms with running=true
        wait_dir_exists 30 ${HOSTAGENT_DIR}
        check_exit_code_and_generate_support_bundle $? "waiting for hostagent directory"

        local host_uuid=`ls -l ${HOSTAGENT_DIR} | grep "^d" | tr -s ' ' | cut -d' ' -f9`

        local desired_apps="${HOSTAGENT_DIR}/${host_uuid}/${DESIRED_APPS}"
        wait_file_exists 30 $desired_apps
        check_exit_code_and_generate_support_bundle $? "waiting for desired_apps.json"

        local comms_state=`python ${JSON_TOOL} --query pf9-comms.running ${desired_apps} 2>&1`
        # python returns boolean values capitalized
        if [[ "${comms_state}" != "True" ]]; then
            echo_debug  "pf9-comms is not running"
            support_generate_bundle
            exit 1
        fi
    fi
}

function start_services()
{
    printf "Starting services"
    # order is important here
    service pf9-comms start > /dev/null 2>&1
    wait_service_running 30 "pf9-comms"
    check_exit_code_and_generate_support_bundle $? "wait pf9-comms to run"

    service pf9-hostagent start > /dev/null 2>&1
    wait_service_running 30 "pf9-hostagent"
    check_exit_code_and_generate_support_bundle $? "wait pf9-hostagent to run"
}

# $1: exit code
# $2: Description of the step being executed
function check_exit_code_and_generate_support_bundle()
{
    local exit_code=$1
    local step_executed=$2

    if [[ "${exit_code}" != "0" ]]; then
        echo_debug "${step_executed} failed"
        support_generate_bundle
        exit 1
    fi
}

function pf9_install()
{
    ${INSTALL} pf9-hostagent*.${EXT}
    if [[ $? != "0" ]]; then
        echo "pf9-hostagent installation failed"
        return 1
    fi
    ${INSTALL} pf9-comms*.${EXT}
    if [[ $? != "0" ]]; then
        echo "pf9-comms installation failed"
        return 1
    fi
}

function pre_install_check()
{
    # Check if we support this Linux distribution
    check_platform

    which ${PKG_MANAGER}  > /dev/null 2>&1
    if [[ $? != "0" ]]; then
        echo "${PKG_MANAGER} is not installed. Exiting..."
        exit 1
    fi
    ${QUERY_PKGS} | grep pf9 > /dev/null 2>&1
    # fail if we match (exit code = 0) at least one package
    # no reinstallation for now
    if [[ $? == "0" ]]; then
        echo "Platform9 packages are already present. Exiting..."
        exit 1
    fi
}

function main()
{
    pre_install_check

    if [[ "${ASK_PROXY}" == "true" ]]; then
        proxy_ask
    fi

    distro_install
    check_exit_code_and_generate_support_bundle $? "distro_install"

    pf9_install
    check_exit_code_and_generate_support_bundle $? "pf9_install"

    # this directory shouldn't exist, but just in case
    rm -rf /var/opt/pf9/hostagent

    if [[ "${SETUP_PROXY}" == "true" ]]; then
        proxy_setup $PROXY_HOST $PROXY_PORT
    fi

    start_services
    check_services_running

    echo
    echo "Installation succeeded!"
}

main
