#!/bin/bash
# Copyright (c) 2015 Platform9 Systems Inc.

# This identifier is replaced by the build script
DISTRO=${DISTRO:-__DISTRO__}
source $(dirname $0)/globals.sh
source $(dirname $0)/wait.sh
source $(dirname $0)/proxy.sh
source $(dirname $0)/support.sh
source $(dirname $0)/ntpd.sh
source $(dirname $0)/ntpd.${DISTRO}.sh
source $(dirname $0)/check_os_distro.sh
source $(dirname $0)/check_sudoers.sh
source $(dirname $0)/check_ports.sh
source $(dirname $0)/check_network.sh
source $(dirname $0)/keystone-token.sh
source $(dirname $0)/nocert-packages.sh
source $(dirname $0)/installer.${DISTRO}

function cleanup()
{
    rm -rf $TMPDIR
}
trap cleanup EXIT

function usage()
{
    echo
    echo "Description: Platform9 installer"
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "--proxy=[<protocol>][<username>:<password>@]<host>:<port>  | Setup HTTP(S) proxy with <host> and <port> as the proxy host and port respectively."
    echo "                                                           | <protocol> defaults to http. <username> and <password> are optional."
    echo "--no-project                                               | Do not ask project name"
    echo "--no-proxy                                                 | Do not ask proxy configuration."
    echo "--ntp                                                      | Install NTP service."
    echo "--ntpd                                                     | Install NTP service. Same as --ntp option."
    echo "--no-ntp                                                   | Do not install NTP service."
    echo "--no-ntpd                                                  | Do not install NTP service. Same as --no-ntp option"
    echo "--extract                                                  | Extract installation files to /tmp/pf9-install-XXXXX and exit."
    echo "--preserve                                                 | Don't delete temporary installation files after installer finishes."
    echo "--skip-os-check                                            | Do not ask operating system compatibility questions."
    if ! packages_present ${EXT}; then
        echo "--controller=<Platform9 controller address>                | Address of the Platform9 region controller, e.g. you.platform9.net or 10.11.12.13 (env:DU_FQDN)."
        echo "--username=<Platform9 username>                            | Keystone authentication username (env:OS_USERNAME)."
        echo "--password=<Platform9 password>                            | Keystone authentication password (env:OS_PASSWORD)."
        echo "--user-token=<Platform9 user token>                        | Keystone authentication token."
        echo "--project-name=<Platform9 project name>                    | Keystone project/tenant on which user has admin privileges (env:OS_TENANT_NAME)."
        echo "--insecure                                                 | Ignore invalid controller certificate."
        echo "--depl-env-webhook=<webhook url>                           | Post message to this URL if deployment environment type file cannot be downloaded."
        echo "--inf-790-webhook=<webhook url>                            | Detect INF-790 occurence, post to specified webhook, and try mitigation"
    fi
    echo "--help                                                     | Display program help."
}

CURL_INSECURE=''

while getopts ":h-:" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                no-project)
                    DONT_ASK_PROJECT="true"
                    ;;
                no-proxy)
                    ASK_PROXY="false"
                    SETUP_PROXY="false"
                    ;;
                proxy=*)
                    PROXY_FULL_URL="${OPTARG#*=}"
                    ;& #fall through to next case. Needs bash>=4.0
                proxy)
                    if [ -z "${PROXY_FULL_URL}" ]; then
                        PROXY_FULL_URL="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    fi
                    PROXY_URL=($(./nettool urlparse "${PROXY_FULL_URL}"))
                    if [[ $? != 0 ]]; then
                        echo "Error parsing proxy url"
                        exit 1
                    fi

                    parse_proxy_url

                    ASK_PROXY="false"
                    SETUP_PROXY="true"
                    ;;
                extract)
                    # disable the EXIT trap that cleans up our $TMPDIR
                    trap - EXIT
                    echo "Files extracted at: ${TMPDIR}"
                    echo
                    exit 0
                    ;;
                preserve)
                    # disable the EXIT trap that cleans up our $TMPDIR
                    trap - EXIT
                    echo "Files extracted at: ${TMPDIR}"
                    ;;
                ntpd|ntp)
                    ASK_NTPD="false"
                    INSTALL_NTPD="true"
                    ;;
                no-ntpd|no-ntp)
                    ASK_NTPD="false"
                    INSTALL_NTPD="false"
                    ;;
                skip-os-check)
                    echo "Skipping operating system compatibility questions"
                    SKIP_OS_CHECK="true"
                    ;;
                controller=*)
                    # overrides the value in globals.sh
                    DU="${OPTARG#*=}"
                    ;& #fall through to next case. Needs bash>=4.0
                controller)
                    if [ -z "${DU}" ]; then
                        DU="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    fi
                    DU_PARSED=($(./nettool urlparse "${DU}"))
                    if [[ $? != 0 ]]; then
                        echo "Error parsing controller URL"
                        exit 1
                    fi
                    # DU_PARSED will have 3 elements -
                    # 0th - protocol (if not specified default is set to http}
                    # 1st - hostname
                    # 2nd - port (if not specified default is 3128)
                    # The defaults are set from the perspective of a proxy
                    # For controller arg we just need the hostname.
                    DU_FQDN="${DU_PARSED[1]}"
                    ;;
                depl-env-webhook=*)
                    DEPL_ENV_WEBHOOK="${OPTARG#*=}"
                    ;;
                depl-env-webhook)
                    DEPL_ENV_WEBHOOK="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                inf-790-webhook=*)
                    INF_790_WEBHOOK="${OPTARG#*=}"
                    ;;
                inf-790-webhook)
                    INF_790_WEBHOOK="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                project-name=*)
                    OS_TENANT_NAME="${OPTARG#*=}"
                    ;;
                project-name)
                    OS_TENANT_NAME="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                username=*)
                    OS_USERNAME="${OPTARG#*=}"
                    ;;
                username)
                    OS_USERNAME="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                password=*)
                    OS_PASSWORD="${OPTARG#*=}"
                    ;;
                password)
                    OS_PASSWORD="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                user-token=*)
                    OS_KEYSTONE_TOKEN="${OPTARG#*=}"
                    ;;
                user-token)
                    OS_KEYSTONE_TOKEN="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                insecure)
                    CURL_INSECURE='-k'
                    ;;
                help)
                    usage
                    exit 0
                    ;;
                *)
                    echo "Unknown option: --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;
        h)
            usage
            exit 0
            ;;
        *)
            if [[ "$OPTERR" = 1 ]] && [[ "${optspec:0:1}" != ":" ]]; then
                echo "Unknown option: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done

# Check for required params
missing_params=""
if ! packages_present ${EXT}; then
    if [ -z "${DU_FQDN}" ]; then missing_params="--controller "; fi
    #If Keystone token isn't provided, username & password are required
    if [ -z "${OS_KEYSTONE_TOKEN}" ]; then
        if [ -z "${OS_USERNAME}" ]; then missing_params="${missing_params} --username"; fi
        if [ -z "${OS_PASSWORD}" ]; then missing_params="${missing_params} --password"; fi
    else #If Keystone token present, username & password shouldn't be provided
        if [[ ! -z "${OS_USERNAME}" ]] || [[ ! -z "${OS_PASSWORD}" ]]; then
            echo "Arg(s) username or password not required when user-token is provided"
            usage
            exit ${CREDS_NOT_NEEDED}
        fi
    fi
    if [ -z "${DONT_ASK_PROJECT}" ]; then
        if [ -z "${OS_TENANT_NAME}" ]; then
            missing_params="${missing_params} --project-name"
        fi
    fi
fi

if [ ! -z "${missing_params}" ]; then
    echo "Required arg(s): ${missing_params} not specified"
    usage
    exit ${PARAMS_MISSING}
fi

function check_services_running()
{
    # verify that pf9-hostagent is running
    echo "Checking if services are running"
    ${SYSTEMCTL_CMD} is-active pf9-hostagent
    check_exit_code_and_generate_support_bundle $? || return ${HOSTAGENT_NOT_RUNNING}

    # if hostagent is running, verify desired_apps.json includes pf9-comms with running=true
    wait_dir_exists 150 ${HOSTAGENT_DIR}
    check_exit_code_and_generate_support_bundle $? || return ${HOSTAGENT_FILES_MISSING}

    local host_id_conf=/etc/pf9/host_id.conf
    local host_uuid=$(sed -n 's/^ *host_id *= *\([A-Fa-f0-9-]*\) *$/\1/ p' ${host_id_conf})

    local desired_apps="${HOSTAGENT_DIR}/${host_uuid}/${DESIRED_APPS}"
    wait_file_exists 90 $desired_apps
    check_exit_code_and_generate_support_bundle $? || return ${HOSTAGENT_FILES_MISSING}

    local comms_state=`${JQ} '."pf9-comms".running' ${desired_apps}`
    if [[ "${comms_state}" != "true" ]]; then
        echo
        echo "pf9-comms is not in the running state"
        support_generate_bundle
        return ${COMMS_NOT_RUNNING}
    fi
}

function start_services()
{
    echo "Starting services"
    # order is important here
    ${SYSTEMCTL_CMD} start pf9-comms || return ${SYSTEMCTL_FAILED_TO_START_COMMS}
    wait_service_running 30 "pf9-comms"
    check_exit_code_and_generate_support_bundle $? || return ${COMMS_NOT_UP}

    ${SYSTEMCTL_CMD} start pf9-sidekick || return ${SYSTEMCTL_FAILED_TO_START_SIDEKICK}
    wait_service_running 30 "pf9-sidekick"
    check_exit_code_and_generate_support_bundle $? || return ${SIDEKICK_NOT_UP}

    ${SYSTEMCTL_CMD} start pf9-hostagent || return ${SYSTEMCTL_FAILED_TO_START_HOSTAGENT}
    wait_service_running 30 "pf9-hostagent"
    check_exit_code_and_generate_support_bundle $? || return ${HOSTAGENT_NOT_UP}
}

# $1: exit code
# $2: Description of the step being executed
function check_exit_code_and_generate_support_bundle()
{
    local exit_code=$1

    if [[ "${exit_code}" != "0" ]]; then
        support_generate_bundle
        return ${exit_code}
    fi
}

function pf9_install()
{
    local pkgnames=(pf9-hostagent pf9-comms)
    for pkgname in "${pkgnames[@]}" ; do
        if ! ${INSTALL} ${pkgname}*.${EXT} ; then
            if [ -n "${INF_790_WEBHOOK}" ] && which curl &> /dev/null ; then
                msg="$(hostname) with DU ${DU_FQDN} failed to install ${pkgname} package, retrying..."
                echo ${msg}
                curl -d "{\"text\":\"$msg\"}" "${INF_790_WEBHOOK}"
                sleep 5
                if ! ${INSTALL} ${pkgname}*.${EXT} ; then
                    msg="$(hostname) with DU ${DU_FQDN} failed to install ${pkgname} package, giving up..."
                    echo ${msg}
                    curl -d "{\"text\":\"$msg\"}" "${INF_790_WEBHOOK}"
                    return ${HOSTAGENT_PKG_INSTALLATION_FAILED}
                fi
            else
                echo "${pkgname} installation failed"
                return ${HOSTAGENT_PKG_INSTALLATION_FAILED}
            fi
        fi
    done
}

function require_keystone_credentials() {
    if [ "$DU_FQDN" == "__DU_FQDN__" ]; then
        # unset by user AND unset by package build scripts
        echo "Please provide the Platform9 controller address with --controller" >&2
        usage >&2
        return ${CONTROLLER_ADRESS_MISSING}
    fi
    if [ -z "$OS_USERNAME" ]; then
        echo "Please provide the Platform9 controller username with --username" >&2
        usage >&2
        return ${CONTROLLER_USER_MISSING}
    fi
    if [ -z "$DONT_ASK_PROJECT" ]; then
        if [ -z "$OS_TENANT_NAME" ]; then
            echo "Please provide the Platform9 project/tenant with --project-name" >&2
            usage >&2
            return ${CONTROLLER_PROJECTNAME_MISSING}
        fi
    fi
    if [ -z "$OS_PASSWORD" ]; then
        read -s -p "Password for $OS_USERNAME on $DU_FQDN: " OS_PASSWORD
        echo >&2
        if [ -z "$OS_PASSWORD" ]; then
            echo "Password is required." >&2
            usage >&2
            return ${CONTROLLER_PASSWORD_MISSING}
        fi
    fi
}

function pre_install_check()
{
    # Check if we support this Linux distribution
    check_platform || return $?

    # Check if sudoers.d is included
    check_sudoers || return $?

    # Check if any ports we need are currently in use
    check_ports || return $?

    # Check if we can resolve and connect to  DU_FQDN
    check_network || return $?

    echo "Checking if package manager is available"
    which ${PKG_MANAGER}
    if [[ $? != "0" ]]; then
        echo "${PKG_MANAGER} is not installed. Exiting..."
        return ${PKG_MANAGER_MISSING}
    fi
    ${QUERY_PKGS} | grep pf9-
    # fail if we match (exit code = 0) at least one package
    # no reinstallation for now
    if [[ $? == "0" ]]; then
        echo
        echo "Platform9 packages are already present. Exiting..."
        return ${PF9_PACKAGES_PRESENT}
    fi
    echo
}

function get_or_create_host_id()
{
    local host_id_conf=/etc/pf9/host_id.conf
    mkdir -p $(dirname ${host_id_conf})
    if [ -f "${host_id_conf}" ]; then
        local host_id=$(sed -n 's/^ *host_id *= *\([A-Fa-f0-9-]*\) *$/\1/ p' ${host_id_conf})
    else
        local host_id=`uuidgen`
        printf "[hostagent]\nhost_id = %s" "${host_id}" > ${host_id_conf}
        chown pf9:pf9group ${host_id_conf}
    fi
    printf "%s" "${host_id}"
}

function add_proxy_to_env()
{
    if [ -n "${PROXY_FULL_URL}" ]; then
        export http_proxy=${PROXY_FULL_URL}
        export https_proxy=${PROXY_FULL_URL}
        export no_proxy=localhost,127.0.0.1
    fi
}

function proxy_routine()
{
    if [[ "${ASK_PROXY}" == "true" ]]; then
        if [[ "${TTY_AVAILABLE}" == "true" ]]; then
            proxy_ask
        fi
    fi

    # proxy settings are available for the rest of the installation.
    add_proxy_to_env
}

function get_keystone_routine()
{
    if ! packages_present ${EXT}; then
        if [ ! -z "${OS_KEYSTONE_TOKEN}" ]; then
            token="${OS_KEYSTONE_TOKEN}"
        else
            require_keystone_credentials || return $?
            token=`keystone_token` || return $?
        fi
        if [ -z "${token}" ]; then
            return ${KEYSTONE_TOKEN_MISSING}
        fi
    fi
}

function ntpd_routine()
{
    if [[ "${ASK_NTPD}" == "true" && "${TTY_AVAILABLE}" == "true" ]]; then
        ntpd_ask
    elif [[ "${INSTALL_NTPD}" == "true" ]]; then
        install_ntpd || return $?
    else
        print_ntpd_warning
    fi
}

function pre_install_routine()
{
    pre_install_check
}

function distro_install_routine()
{
    distro_install
    check_exit_code_and_generate_support_bundle $? || return $?
}

function download_nocert_routine()
{
    if ! packages_present ${EXT}; then
        download_nocert ${EXT} ${token}
        check_exit_code_and_generate_support_bundle $? || return $?
    fi
}

function install_hostagent_routine()
{
    echo "Installing Platform9 host agent"
    pf9_install
    check_exit_code_and_generate_support_bundle $? || return $?
}

function set_proxy_routine()
{
    if [[ "${SETUP_PROXY}" == "true" ]]; then
        proxy_setup || return ${PROXY_SETUP_FAILED}
    fi
}

function update_config_routine()
{
    update_config
    check_exit_code_and_generate_support_bundle $? || return $UPDATE_CONFIG_FAILED
}

function get_certs_routine()
{
    local host_id=$(get_or_create_host_id)
    get_certs_from_vouch ${token} ${host_id}
    check_exit_code_and_generate_support_bundle $? || return $?
}

function post_install_routine()
{

    # this directory shouldn't exist, but just in case
    rm -rf /var/opt/pf9/hostagent

    start_services || return $?
    check_services_running || return $?
    echo
    echo "Installation succeeded!"
}

function main()
{
    routines=( "proxy_routine" "get_keystone_routine" "ntpd_routine" \
               "pre_install_routine" "distro_install_routine" \
               "download_nocert_routine" "install_hostagent_routine" \
               "set_proxy_routine" "update_config_routine" \
               "get_certs_routine" "post_install_routine" )

    for routine in ${routines[@]}; do
        echo "Starting with $routine"
        $routine || exit $?
        echo "$routine executed successfully"
    done
}

main
